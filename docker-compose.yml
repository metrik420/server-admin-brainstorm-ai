version: '3.8'

services:
  # Frontend - React Web UI
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: serverai-frontend
    ports:
      - "420420:80"
    environment:
      - REACT_APP_API_URL=http://localhost:420421
    depends_on:
      - backend
    networks:
      - serverai-network
    restart: unless-stopped

  # Backend - Python Crawler API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: serverai-backend
    ports:
      - "420421:8000"
    environment:
      - DATABASE_URL=postgresql://serverai:serverai123@postgres:5432/serverai_db
      - REDIS_URL=redis://redis:6379
      - STORAGE_PATH=/app/storage
    volumes:
      - crawler_storage:/app/storage
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
    networks:
      - serverai-network
    restart: unless-stopped

  # Database - PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: serverai-postgres
    environment:
      - POSTGRES_DB=serverai_db
      - POSTGRES_USER=serverai
      - POSTGRES_PASSWORD=serverai123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - serverai-network
    restart: unless-stopped

  # Redis - Task Queue & Caching
  redis:
    image: redis:7-alpine
    container_name: serverai-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - serverai-network
    restart: unless-stopped

  # Crawler Worker - Background Tasks
  crawler-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: serverai-crawler-worker
    environment:
      - DATABASE_URL=postgresql://serverai:serverai123@postgres:5432/serverai_db
      - REDIS_URL=redis://redis:6379
      - STORAGE_PATH=/app/storage
    volumes:
      - crawler_storage:/app/storage
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
    networks:
      - serverai-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Nginx - Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: serverai-nginx
    ports:
      - "420420:420420"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - frontend
      - backend
    networks:
      - serverai-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  crawler_storage:
    driver: local

networks:
  serverai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16